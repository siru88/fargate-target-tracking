AWSTemplateFormatVersion: 2010-09-09

Parameters:

  VPC:
    Type: 'AWS::EC2::VPC::Id'
    Default: vpc-0f7d9abecc42b6614
  SubnetA:
    Type: 'AWS::EC2::Subnet::Id'
    Default: subnet-0eb7e116e8884a151
  SubnetB:
    Type: 'AWS::EC2::Subnet::Id'
    Default: subnet-09dbebe83b23fc82f
  SubnetC:
    Type: 'AWS::EC2::Subnet::Id'
    Default: subnet-0bf7c9475cb324e5c
  Cluster:
    Type: String
    Default: Platform-0
  Image:
    Type: String
    Default: 801538319376.dkr.ecr.ap-south-1.amazonaws.com/lender-api:__GIT_REV_SHA__
  ContainerPort:
    Type: Number
    Default: 7700
  LoadBalancerPort:
    Type: Number
    Default: 80
  HealthCheckPath:
    Type: String
    Default: /health
  ContainerSecurityGroup:
    Type: String
    Default: sg-06a59739057a97409
  ServiceNameA:
    Type: String
    Default: lender-api-rails
  ServiceNameB:
    Type: String
    Default: lender-api-sidekiq
  ServiceNameC:
    Type: String
    Default: lender-api-propono
  ContainerCpuA:
    Type: Number
    Default: 256
  ContainerMemoryA:
    Type: Number
    Default: 512
  ContainerCpuB:
    Type: Number
    Default: 256
  ContainerMemoryB:
    Type: Number
    Default: 512
  ContainerCpuC:
    Type: Number
    Default: 256
  ContainerMemoryC:
    Type: Number
    Default: 512
    
Resources:
  TaskDefinitionA:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceNameA
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ContainerCpuA
      Memory: !Ref ContainerMemoryA
      ExecutionRoleArn: arn:aws:iam::678413560749:role/ecsTaskExecutionRole
      TaskRoleArn: arn:aws:iam::678413560749:role/ecsTaskExecutionRole
      ContainerDefinitions:
        - Name: !Ref ServiceNameA
          Image: !Ref Image
          Essential: true
          Cpu: !Ref ContainerCpuA
          Memory: !Ref ContainerMemoryA
          MemoryReservation: 256
          Environment:
            - Name: DEVOPS_BUCKET
              Value: arthimpact-devops-mumbai
            - Name: Env
              Value: staging
            - Name: SUBPROC
              Value: rails              
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroupA
              awslogs-stream-prefix: ecs
  # A role needed by ECS.
  ServiceA:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      ServiceName: !Ref ServiceNameA
      TaskDefinition: !Ref TaskDefinitionA
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up.
      HealthCheckGracePeriodSeconds: 60
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
            - !Ref SubnetC
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      LoadBalancers:
        - ContainerName: !Ref ServiceNameA
          ContainerPort: !Ref ContainerPort
          TargetGroupArn: !Ref TargetGroupA
  TargetGroupA:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckTimeoutSeconds: 15
      UnhealthyThresholdCount: 9
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Sub ${ServiceNameA}-alb-tg
      VpcId: !Ref VPC
      Port: 80
      Protocol: HTTP
  ListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
        Actions:
          - Type: redirect
            RedirectConfig:
                Host: "#{host}"
                Path: "/#{path}"
                Port: 443
                Protocol: "HTTPS"
                Query: "#{query}"
                StatusCode: HTTP_301
        Conditions:
          - Field: host-header
            Values:
              - lender-api.staging.happy-tech.in
        ListenerArn: arn:aws:elasticloadbalancing:ap-south-1:678413560749:listener/app/Happyness-LB/c371746554b22347/3bb6f4267fd9626d
        Priority: 609
  ListenerRule2:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
        Actions:
          - Type: forward
            ForwardConfig:
              TargetGroups:
                - TargetGroupArn: !Ref TargetGroupA
                  Weight: 1
        Conditions:
          - Field: host-header
            Values:
              - lender-api.staging.happy-tech.in
        ListenerArn: arn:aws:elasticloadbalancing:ap-south-1:678413560749:listener/app/Happyness-LB/c371746554b22347/61c33a27e8084f3b
        Priority: 610
        
  TaskDefinitionB:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceNameB
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ContainerCpuB
      Memory: !Ref ContainerMemoryB
      ExecutionRoleArn: arn:aws:iam::678413560749:role/ecsTaskExecutionRole
      TaskRoleArn: arn:aws:iam::678413560749:role/ecsTaskExecutionRole
      ContainerDefinitions:
        - Name: !Ref ServiceNameB
          Image: !Ref Image
          Essential: true
          Cpu: !Ref ContainerCpuB
          Memory: !Ref ContainerMemoryB
          MemoryReservation: 256
          Environment:
            - Name: DEVOPS_BUCKET
              Value: arthimpact-devops-mumbai
            - Name: Env
              Value: staging
            - Name: SUBPROC
              Value: sidekiq              
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroupB
              awslogs-stream-prefix: ecs
  # A role needed by ECS.
  ServiceB:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      ServiceName: !Ref ServiceNameB
      TaskDefinition: !Ref TaskDefinitionB
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up.
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
            - !Ref SubnetC
          SecurityGroups:
            - !Ref ContainerSecurityGroup

  TaskDefinitionC:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ServiceNameC
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: !Ref ContainerCpuC
      Memory: !Ref ContainerMemoryC
      ExecutionRoleArn: arn:aws:iam::678413560749:role/ecsTaskExecutionRole
      TaskRoleArn: arn:aws:iam::678413560749:role/ecsTaskExecutionRole
      ContainerDefinitions:
        - Name: !Ref ServiceNameC
          Image: !Ref Image
          Essential: true
          Cpu: !Ref ContainerCpuC
          Memory: !Ref ContainerMemoryC
          MemoryReservation: 256
          Environment:
            - Name: DEVOPS_BUCKET
              Value: arthimpact-devops-mumbai
            - Name: Env
              Value: staging
            - Name: SUBPROC
              Value: propono              
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroupC
              awslogs-stream-prefix: ecs
  # A role needed by ECS.
  ServiceC:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref Cluster
      ServiceName: !Ref ServiceNameC
      TaskDefinition: !Ref TaskDefinitionC
      DeploymentConfiguration:
        MinimumHealthyPercent: 100
        MaximumPercent: 200
      DesiredCount: 1
      # This may need to be adjusted if the container takes a while to start up.
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          # change to DISABLED if you're using private subnets that have access to a NAT gateway
          AssignPublicIp: ENABLED
          Subnets:
            - !Ref SubnetA
            - !Ref SubnetB
            - !Ref SubnetC
          SecurityGroups:
            - !Ref ContainerSecurityGroup

  ServiceAutoScalingTarget:
      Type: AWS::ApplicationAutoScaling::ScalableTarget
      Properties:
        MaxCapacity: '6'
        MinCapacity: '1'
        ResourceId: !Join ["/", [service, !Ref "Cluster", !GetAtt [ServiceA, Name]]]
        RoleARN: !GetAtt ServiceAutoScaleRole.Arn
        ScalableDimension: ecs:service:DesiredCount
        ServiceNamespace: ecs

  ServiceAutoScaleRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:DescribeServices', 'ecs:UpdateService', 'cloudwatch:DescribeAlarms']
            Resource: '*'

  TargetTrackingCPUPolicy:
      Type: AWS::ApplicationAutoScaling::ScalingPolicy
      Properties:
        PolicyName: Fargate-TTScalingPolicy
        PolicyType: TargetTrackingScaling
        ScalingTargetId:
          Ref: ServiceAutoScalingTarget
        ScalableDimension: ecs:service:DesiredCount
        ServiceNamespace: ecs
        TargetTrackingScalingPolicyConfiguration:
          TargetValue: 75.0
          ScaleInCooldown: 60
          ScaleOutCooldown: 60
          PredefinedMetricSpecification:
            PredefinedMetricType: ECSServiceAverageCPUUtilization

  LogGroupA:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ServiceNameA]]
  LogGroupB:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ServiceNameB]]
  LogGroupC:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref ServiceNameC]]
